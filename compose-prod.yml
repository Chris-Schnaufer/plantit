# Runs PlantIT in production mode. That is:
#    1) Starts the djangoapp by running gunicorn
#    2) Runs the nginx webserver in a seprate container
#    3) Connects gunicorn to nginx
#    4) Saves database data to ./db
#
# For production the wsgi server is run on the djangoapp container with django
# I chose to place the nginx server in its own container to:
#    1) Allow me to use the prepackaged ngnix containers
#    2) Not have it installed in the web container
#    3) Allow easier changes of systems later (aka, use a different web server)
#
# See docker-compose.yml for usage.
version: '3'

services:
  djangoapp:
    command: ["gunicorn", "--bind", ":8000", "--log-level", "debug", "plantit.wsgi:application"]
    environment:
      - DJANGO_SETTINGS_MODULE=plantit.settings
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DJANGO_DEBUG=${DJANGO_DEBUG}
      - DJANGO_FIELD_ENCRYPTION_KEY=${DJANGO_FIELD_ENCRYPTION_KEY}
      - DJANGO_API_URL=${DJANGO_API_URL}
      - DJANGO_ALLOWED_HOSTS=*
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_NAME=${POSTGRES_NAME}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - ngnix_network
    restart: always
    depends_on:
      - db-prod
    logging:
      driver: gelf
      options:
        gelf-address: udp://localhost:12201
        tag: "django"

  celery:
    environment:
      - DJANGO_SETTINGS_MODULE=plantit.settings
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DJANGO_DEBUG=${DJANGO_DEBUG}
      - DJANGO_FIELD_ENCRYPTION_KEY=${DJANGO_FIELD_ENCRYPTION_KEY}
      - DJANGO_API_URL=${DJANGO_API_URL}
      - DJANGO_ALLOWED_HOSTS=*
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_NAME=${POSTGRES_NAME}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    logging:
      driver: gelf
      options:
        gelf-address: udp://localhost:12201
        tag: "celery"

  db-prod:
    image: postgres
    hostname: db
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_NAME=${POSTGRES_NAME}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./db:/var/lib/postgresql/data
    restart: always
    logging:
      driver: gelf
      options:
        gelf-address: udp://localhost:12201
        tag: "django-db"

  nginx:
    image: nginx:1.15.12
    #command: [nginx-debug, '-g', 'daemon off;']
    ports:
      - 80:80

    volumes:
      - ./config/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./django/static/:/opt/django/static/:ro
      - ./django/files/public/:/opt/django/public/:ro

    depends_on:
      - djangoapp

    networks:
      - ngnix_network
    restart: always

    logging:
      driver: gelf
      options:
        gelf-address: udp://localhost:12201
        tag: "ngnix"

  rabbitmq:
    logging:
      driver: gelf
      options:
        gelf-address: udp://localhost:12201
        tag: "rabbitmq"

networks:
  ngnix_network:
    driver: bridge
