# Runs PlantIT in production mode. That is:
#    1) Starts plantit by running gunicorn
#    2) Runs the nginx webserver in a seprate container
#    3) Connects gunicorn to nginx
#    4) Saves database data to ./db
#
# For production the wsgi server is run on the plantit container with django
# I chose to place the nginx server in its own container to:
#    1) Allow me to use the prepackaged ngnix containers
#    2) Not have it installed in the web container
#    3) Allow easier changes of systems later (aka, use a different web server)
#
# See docker-compose.yml for usage.
version: '3.7'

services:

  plantit:
    command: ["gunicorn", "--bind", ":8000", "--log-level", "debug", "plantit.wsgi:application"]
    networks:
      - ngnix_network
      - default
    restart: always
    logging:
      driver: gelf
      options:
        gelf-address: udp://localhost:12201
        tag: "plantit"

  postgres:
    # volumes:
    #   - postgres_data:/var/lib/postgresql/data
    volumes:
      - ./db:/var/lib/postgresql/data
    restart: always
    logging:
      driver: gelf
      options:
        gelf-address: udp://localhost:12201
        tag: "postgres"

  rabbitmq:
    logging:
      driver: gelf
      options:
        gelf-address: udp://localhost:12201
        tag: "rabbitmq"

  celery:
    logging:
      driver: gelf
      options:
        gelf-address: udp://localhost:12201
        tag: "celery"

  nginx:
    image: nginx
    ports:
      - 80:80
    volumes:
      - ./config/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./plantit/static/:/opt/plantit/static/:ro
      - ./plantit/files/public/:/opt/plantit/public/:ro
    depends_on:
      - plantit
    networks:
      - ngnix_network
    restart: always
    logging:
      driver: gelf
      options:
        gelf-address: udp://localhost:12201
        tag: "ngnix"

networks:
  ngnix_network:
    driver: bridge