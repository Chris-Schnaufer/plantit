# Base docker-compose file.
#
# Usage:
#  For Developer mode:
#    docker-compose -f docker-compose.yml -f compose-dev.yml up
#
#  For Production mode:
#    docker-compose -f docker-compose.yml -f compose-production.yml up
#
version: '3.7'

services:

  djangoapp:
    build: ./dockerfiles/djangoapp
    working_dir: /code/django
    depends_on:
      - postgres
    volumes:
      - .:/code
    environment:
      - DJANGO_SETTINGS_MODULE=plantit.settings
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DJANGO_DEBUG=${DJANGO_DEBUG}
      - DJANGO_FIELD_ENCRYPTION_KEY=${DJANGO_FIELD_ENCRYPTION_KEY}
      - DJANGO_API_URL=${DJANGO_API_URL}
      - DJANGO_ALLOWED_HOSTS=*
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_NAME=${POSTGRES_NAME}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}

  postgres:
    image: postgres
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_NAME=${POSTGRES_NAME}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    healthcheck:
      test: /usr/bin/pg_isready -U ${POSTGRES_USER}
      interval: 20s
      timeout: 20s
      retries: 2
      start_period: 20s

  rabbitmq:
    image: rabbitmq:3.7.6-management
    hostname: rabbitmq
    ports:
      - 15672:15672

  celery:
    build: ./dockerfiles/djangoapp
    volumes:
      - .:/code
    working_dir: /code/django
    depends_on:
      - rabbitmq
    command: celery -A plantit worker --loglevel=info
    environment:
      - DJANGO_SETTINGS_MODULE=plantit.settings
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DJANGO_DEBUG=${DJANGO_DEBUG}
      - DJANGO_FIELD_ENCRYPTION_KEY=${DJANGO_FIELD_ENCRYPTION_KEY}
      - DJANGO_API_URL=${DJANGO_API_URL}
      - DJANGO_ALLOWED_HOSTS=*
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_NAME=${POSTGRES_NAME}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}

  flower:
    image: mher/flower
    volumes:
      - .:/code
    depends_on:
      - celery
    command: flower --broker=amqp://rabbitmq --port=5555
    ports:
      - 5555:5555

  mongo:
    image: mongo:3
    volumes:
      - mongo_data:/data/db
    networks:
      - default
      - graylog

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch-oss:6.8.5
    volumes:
      - es_data:/usr/share/elasticsearch/data
    environment:
      - http.host=0.0.0.0
      - transport.host=localhost
      - network.host=0.0.0.0
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    deploy:
      resources:
        limits:
          memory: 1g
    networks:
      - graylog
    healthcheck:
      test: curl -f http://localhost:9200/
      interval: 20s
      timeout: 20s
      retries: 2
      start_period: 20s

  graylog:
    image: graylog/graylog:3.2
    volumes:
      - graylog_journal:/usr/share/graylog/data/journal
    environment:
      # CHANGE ME (must be at least 16 characters)!
      - GRAYLOG_PASSWORD_SECRET=somepasswordpepper
      # Password: admin
      - GRAYLOG_ROOT_PASSWORD_SHA2=8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918
      - GRAYLOG_HTTP_EXTERNAL_URI=http://127.0.0.1:9000/
    networks:
      - graylog
    depends_on:
      - mongo
      - elasticsearch
    ports:
      # Graylog web interface and REST API
      - 9000:9000
      # Syslog TCP
      - 1514:1514
      # Syslog UDP
      - 1514:1514/udp
      # GELF TCP
      - 12201:12201
      # GELF UDP
      - 12201:12201/udp
    healthcheck:
      test: curl -f http://localhost:9000/
      interval: 20s
      timeout: 20s
      retries: 2
      start_period: 20s

networks:
  graylog:
    driver: bridge

volumes:
  mongo_data:
    driver: local
  es_data:
    driver: local
  graylog_journal:
    driver: local